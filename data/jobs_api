import flask
from flask import jsonify, make_response
from data import db_session
from data.jobs import Jobs
from flask import request

blueprint = flask.Blueprint(
    'jobs',
    __name__,
    template_folder='templates'
)


@blueprint.route('/api/jobs/<int:job_id>', methods=['GET'])
def get_one_jobs(job_id):
    db_sess = db_session.create_session()
    jobs = db_sess.query(Jobs).get(job_id)
    if not jobs:
        return make_response(jsonify({'error': 'Not found'}), 404)
    return jsonify(
        {
            'jobs':
                [item.to_dict(only=(
                    'team_leader', 'job', 'work_size', 'collaborators', 'start_date', 'end_date', 'is_finished'))
                    for item in jobs]
        }
    )


@blueprint.route('/api/jobs')
def post_job():
    if not request.json():
        return make_response(jsonify({'error': 'Empty request'}), 404)
    if not all([key in request.json() for key in
                ['team_leader', 'job', 'work_size', 'collaborators', 'start_date', 'end_date', 'is_finished']]):
        return make_response(jsonify({'error': 'Bad request'}), 400)
    db_sess = db_session.create_session()
    jobs = Jobs(team_leader=request.json()['team_leader'], job=request.json()['job'],
                work_size=request.json()['work_size'],
                collaborators=request.json()['collaborators'],
                start_date=request.json()['start_date'], end_date=request.json()['end_date'],
                is_finished=request.json()['is_finished'])
    db_sess.add(jobs)
    db_sess.commit()
    return jsonify({'id': jobs.id})


@blueprint.route('/delete/jobs/<int:jobs_id>')
def delete_jobs(jobs_id):
    db_sess = db_session.create_session()
    jobs = db_sess.query(Jobs).get(jobs_id)
    if not jobs:
        return make_response(jsonify({'error': 'Not found'}), 404)
    db_sess.delete(jobs)
    db_sess.commit()
    return jsonify({'success': 'OK'})


@blueprint.route('/edit/jobs/<int:jobs_id>')
def edit_jobs(jobs_id):
    if not request.json():
        return make_response(jsonify({'error': 'Empty request'}), 404)
    if not all([key in request.json() for key in
                ['team_leader', 'job', 'work_size', 'collaborators', 'start_date', 'end_date', 'is_finished']]):
        return make_response(jsonify({'error': 'Bad request'}), 400)
    db_sess = db_session.create_session()
    job = db_sess.query(Jobs).filter(Jobs.id == jobs_id).first()
    job.team_leader = request.json()['team_leader']
    job.job = request.json()['job']
    job.work_size = request.json()['work_size']
    job.collaborators = request.json()['collaborators']
    job.start_date = request.json()['start_date']
    job.end_date = request.json()['end_date']
    job.is_finished = request.json()['is_finished']
    db_sess.add(job)
    db_sess.commit()
    return jsonify({'id': job.id})
